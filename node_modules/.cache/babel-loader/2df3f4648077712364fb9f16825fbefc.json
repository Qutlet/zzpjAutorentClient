{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { isNull, isObject, isString } from '@react-native-firebase/app/lib/common';\nimport { NativeFirebaseError } from '@react-native-firebase/app/lib/internal';\nconst SETTABLE_FIELDS = ['cacheControl', 'contentDisposition', 'contentEncoding', 'contentLanguage', 'contentType', 'customMetadata', 'md5hash'];\nexport async function handleStorageEvent(storageInstance, event) {\n  const {\n    taskId,\n    eventName\n  } = event;\n  const body = event.body || {};\n\n  if (body.error) {\n    body.error = await NativeFirebaseError.fromEvent(body.error, storageInstance._config.namespace);\n  }\n\n  storageInstance.emitter.emit(storageInstance.eventNameForApp(taskId, eventName), body);\n}\nexport function getHttpUrlParts(url) {\n  const decoded = decodeURIComponent(url);\n  const parts = decoded.match(/\\/b\\/(.*)\\/o\\/([a-zA-Z0-9./\\-_]+)(.*)/);\n\n  if (!parts || parts.length < 3) {\n    return null;\n  }\n\n  return {\n    bucket: `gs://${parts[1]}`,\n    path: parts[2]\n  };\n}\nexport function getGsUrlParts(url) {\n  const bucket = url.substring(0, url.indexOf('/', 5)) || url;\n  const path = (url.indexOf('/', 5) > -1 ? url.substring(url.indexOf('/', 5) + 1, url.length) : '/') || '/';\n  return {\n    bucket,\n    path\n  };\n}\nexport function validateMetadata(metadata, update = true) {\n  if (!isObject(metadata)) {\n    throw new Error('firebase.storage.SettableMetadata must be an object value if provided.');\n  }\n\n  const metadataEntries = Object.entries(metadata);\n\n  for (let i = 0; i < metadataEntries.length; i++) {\n    const [key, value] = metadataEntries[i]; // validate keys\n\n    if (!SETTABLE_FIELDS.includes(key)) {\n      throw new Error(`firebase.storage.SettableMetadata unknown property '${key}' provided for metadata.`);\n    } // md5 is only allowed on put, not on update\n\n\n    if (key === 'md5hash' && update === true) {\n      throw new Error(`firebase.storage.SettableMetadata md5hash may only be set on upload, not on updateMetadata`);\n    } // validate values\n\n\n    if (key !== 'customMetadata') {\n      if (!isString(value) && !isNull(value)) {\n        throw new Error(`firebase.storage.SettableMetadata invalid property '${key}' should be a string or null value.`);\n      }\n    } else if (!isObject(value)) {\n      throw new Error('firebase.storage.SettableMetadata.customMetadata must be an object of keys and string values.');\n    }\n  }\n\n  return metadata;\n}","map":{"version":3,"sources":["C:/Users/macie/Desktop/AutoRent-client-main/node_modules/@react-native-firebase/storage/lib/utils.js"],"names":["isNull","isObject","isString","NativeFirebaseError","SETTABLE_FIELDS","handleStorageEvent","storageInstance","event","taskId","eventName","body","error","fromEvent","_config","namespace","emitter","emit","eventNameForApp","getHttpUrlParts","url","decoded","decodeURIComponent","parts","match","length","bucket","path","getGsUrlParts","substring","indexOf","validateMetadata","metadata","update","Error","metadataEntries","Object","entries","i","key","value","includes"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isNull, isObject, isString } from '@react-native-firebase/app/lib/common';\nimport { NativeFirebaseError } from '@react-native-firebase/app/lib/internal';\n\nconst SETTABLE_FIELDS = [\n  'cacheControl',\n  'contentDisposition',\n  'contentEncoding',\n  'contentLanguage',\n  'contentType',\n  'customMetadata',\n  'md5hash',\n];\n\nexport async function handleStorageEvent(storageInstance, event) {\n  const { taskId, eventName } = event;\n  const body = event.body || {};\n\n  if (body.error) {\n    body.error = await NativeFirebaseError.fromEvent(body.error, storageInstance._config.namespace);\n  }\n\n  storageInstance.emitter.emit(storageInstance.eventNameForApp(taskId, eventName), body);\n}\n\nexport function getHttpUrlParts(url) {\n  const decoded = decodeURIComponent(url);\n  const parts = decoded.match(/\\/b\\/(.*)\\/o\\/([a-zA-Z0-9./\\-_]+)(.*)/);\n\n  if (!parts || parts.length < 3) {\n    return null;\n  }\n\n  return { bucket: `gs://${parts[1]}`, path: parts[2] };\n}\n\nexport function getGsUrlParts(url) {\n  const bucket = url.substring(0, url.indexOf('/', 5)) || url;\n  const path =\n    (url.indexOf('/', 5) > -1 ? url.substring(url.indexOf('/', 5) + 1, url.length) : '/') || '/';\n\n  return { bucket, path };\n}\n\nexport function validateMetadata(metadata, update = true) {\n  if (!isObject(metadata)) {\n    throw new Error('firebase.storage.SettableMetadata must be an object value if provided.');\n  }\n\n  const metadataEntries = Object.entries(metadata);\n\n  for (let i = 0; i < metadataEntries.length; i++) {\n    const [key, value] = metadataEntries[i];\n    // validate keys\n    if (!SETTABLE_FIELDS.includes(key)) {\n      throw new Error(\n        `firebase.storage.SettableMetadata unknown property '${key}' provided for metadata.`,\n      );\n    }\n\n    // md5 is only allowed on put, not on update\n    if (key === 'md5hash' && update === true) {\n      throw new Error(\n        `firebase.storage.SettableMetadata md5hash may only be set on upload, not on updateMetadata`,\n      );\n    }\n\n    // validate values\n    if (key !== 'customMetadata') {\n      if (!isString(value) && !isNull(value)) {\n        throw new Error(\n          `firebase.storage.SettableMetadata invalid property '${key}' should be a string or null value.`,\n        );\n      }\n    } else if (!isObject(value)) {\n      throw new Error(\n        'firebase.storage.SettableMetadata.customMetadata must be an object of keys and string values.',\n      );\n    }\n  }\n\n  return metadata;\n}\n"]},"metadata":{},"sourceType":"module"}