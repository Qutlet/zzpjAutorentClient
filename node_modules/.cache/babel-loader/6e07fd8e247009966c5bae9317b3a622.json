{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { isAndroid, isNumber, isString } from '@react-native-firebase/app/lib/common';\nimport { createModuleNamespace, FirebaseModule, getFirebaseRoot } from '@react-native-firebase/app/lib/internal';\nimport StorageReference from './StorageReference';\nimport StorageStatics from './StorageStatics';\nimport { getGsUrlParts, getHttpUrlParts, handleStorageEvent } from './utils';\nimport version from './version';\nconst namespace = 'storage';\nconst nativeEvents = ['storage_event'];\nconst nativeModuleName = 'RNFBStorageModule';\n\nclass FirebaseStorageModule extends FirebaseModule {\n  constructor(app, config, bucketUrl) {\n    super(app, config, bucketUrl);\n\n    if (bucketUrl === undefined) {\n      this._customUrlOrRegion = `gs://${app.options.storageBucket}`;\n    } else if (!isString(bucketUrl) || !bucketUrl.startsWith('gs://')) {\n      throw new Error(\"firebase.app().storage(*) bucket url must be a string and begin with 'gs://'\");\n    }\n\n    this.emitter.addListener(this.eventNameForApp(nativeEvents[0]), handleStorageEvent.bind(null, this)); // Emulator instance vars needed to send through on iOS, iOS does not persist emulator state between calls\n\n    this.emulatorHost = undefined;\n    this.emulatorPort = 0;\n    this._maxUploadRetryTime = this.native.maxUploadRetryTime || 0;\n    this._maxDownloadRetryTime = this.native.maxDownloadRetryTime || 0;\n    this._maxOperationRetryTime = this.native.maxOperationRetryTime || 0;\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setmaxuploadretrytime\n   */\n\n\n  get maxUploadRetryTime() {\n    return this._maxUploadRetryTime;\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setmaxdownloadretrytime\n   */\n\n\n  get maxDownloadRetryTime() {\n    return this._maxDownloadRetryTime;\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#maxoperationretrytime\n   */\n\n\n  get maxOperationRetryTime() {\n    return this._maxOperationRetryTime;\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#ref\n   */\n\n\n  ref(path = '/') {\n    if (!isString(path)) {\n      throw new Error(\"firebase.storage().ref(*) 'path' must be a string value.\");\n    }\n\n    return new StorageReference(this, path);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#refFromURL\n   */\n\n\n  refFromURL(url) {\n    if (!isString(url) || !url.startsWith('gs://') && !url.startsWith('http')) {\n      throw new Error(\"firebase.storage().refFromURL(*) 'url' must be a string value and begin with 'gs://' or 'https://'.\");\n    }\n\n    let path;\n    let bucket;\n\n    if (url.startsWith('http')) {\n      const parts = getHttpUrlParts(url);\n\n      if (!parts) {\n        throw new Error(\"firebase.storage().refFromURL(*) unable to parse 'url', ensure it's a valid storage url'.\");\n      }\n\n      ({\n        bucket,\n        path\n      } = parts);\n    } else {\n      ({\n        bucket,\n        path\n      } = getGsUrlParts(url));\n    }\n\n    const storageInstance = this.app.storage(bucket);\n    return new StorageReference(storageInstance, path);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxOperationRetryTime\n   */\n\n\n  setMaxOperationRetryTime(time) {\n    if (!isNumber(time)) {\n      throw new Error(\"firebase.storage().setMaxOperationRetryTime(*) 'time' must be a number value.\");\n    }\n\n    this._maxOperationRetryTime = time;\n    return this.native.setMaxOperationRetryTime(time);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxUploadRetryTime\n   */\n\n\n  setMaxUploadRetryTime(time) {\n    if (!isNumber(time)) {\n      throw new Error(\"firebase.storage().setMaxUploadRetryTime(*) 'time' must be a number value.\");\n    }\n\n    this._maxUploadRetryTime = time;\n    return this.native.setMaxUploadRetryTime(time);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxDownloadRetryTime\n   */\n\n\n  setMaxDownloadRetryTime(time) {\n    if (!isNumber(time)) {\n      throw new Error(\"firebase.storage().setMaxDownloadRetryTime(*) 'time' must be a number value.\");\n    }\n\n    this._maxDownloadRetryTime = time;\n    return this.native.setMaxDownloadRetryTime(time);\n  }\n\n  useEmulator(host, port) {\n    if (!host || !isString(host) || !port || !isNumber(port)) {\n      throw new Error('firebase.storage().useEmulator() takes a non-empty host and port');\n    }\n\n    let _host = host;\n\n    if (isAndroid && _host) {\n      if (_host === 'localhost' || _host === '127.0.0.1') {\n        _host = '10.0.2.2'; // eslint-disable-next-line no-console\n\n        console.log('Mapping storage host to \"10.0.2.2\" for android emulators. Use real IP on real devices.');\n      }\n    }\n\n    this.emulatorHost = host;\n    this.emulatorPort = port;\n    this.native.useEmulator(_host, port);\n    return [_host, port]; // undocumented return, just used to unit test android host remapping\n  }\n\n} // import { SDK_VERSION } from '@react-native-firebase/storage';\n\n\nexport const SDK_VERSION = version; // import { STATICS } from '@react-native-firebase/storage';\n\nexport const STATICS = StorageStatics; // import storage from '@react-native-firebase/storage';\n// storage().X(...);\n\nexport default createModuleNamespace({\n  statics: StorageStatics,\n  version,\n  namespace,\n  nativeEvents,\n  nativeModuleName,\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: true,\n  disablePrependCustomUrlOrRegion: true,\n  ModuleClass: FirebaseStorageModule\n}); // import storage, { firebase } from '@react-native-firebase/storage';\n// storage().X(...);\n// firebase.storage().X(...);\n\nexport const firebase = getFirebaseRoot();","map":{"version":3,"sources":["C:/Users/macie/Desktop/AutoRent-client-main/node_modules/@react-native-firebase/storage/lib/index.js"],"names":["isAndroid","isNumber","isString","createModuleNamespace","FirebaseModule","getFirebaseRoot","StorageReference","StorageStatics","getGsUrlParts","getHttpUrlParts","handleStorageEvent","version","namespace","nativeEvents","nativeModuleName","FirebaseStorageModule","constructor","app","config","bucketUrl","undefined","_customUrlOrRegion","options","storageBucket","startsWith","Error","emitter","addListener","eventNameForApp","bind","emulatorHost","emulatorPort","_maxUploadRetryTime","native","maxUploadRetryTime","_maxDownloadRetryTime","maxDownloadRetryTime","_maxOperationRetryTime","maxOperationRetryTime","ref","path","refFromURL","url","bucket","parts","storageInstance","storage","setMaxOperationRetryTime","time","setMaxUploadRetryTime","setMaxDownloadRetryTime","useEmulator","host","port","_host","console","log","SDK_VERSION","STATICS","statics","hasMultiAppSupport","hasCustomUrlOrRegionSupport","disablePrependCustomUrlOrRegion","ModuleClass","firebase"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isAndroid, isNumber, isString } from '@react-native-firebase/app/lib/common';\nimport {\n  createModuleNamespace,\n  FirebaseModule,\n  getFirebaseRoot,\n} from '@react-native-firebase/app/lib/internal';\nimport StorageReference from './StorageReference';\nimport StorageStatics from './StorageStatics';\nimport { getGsUrlParts, getHttpUrlParts, handleStorageEvent } from './utils';\nimport version from './version';\n\nconst namespace = 'storage';\nconst nativeEvents = ['storage_event'];\nconst nativeModuleName = 'RNFBStorageModule';\n\nclass FirebaseStorageModule extends FirebaseModule {\n  constructor(app, config, bucketUrl) {\n    super(app, config, bucketUrl);\n    if (bucketUrl === undefined) {\n      this._customUrlOrRegion = `gs://${app.options.storageBucket}`;\n    } else if (!isString(bucketUrl) || !bucketUrl.startsWith('gs://')) {\n      throw new Error(\n        \"firebase.app().storage(*) bucket url must be a string and begin with 'gs://'\",\n      );\n    }\n\n    this.emitter.addListener(\n      this.eventNameForApp(nativeEvents[0]),\n      handleStorageEvent.bind(null, this),\n    );\n\n    // Emulator instance vars needed to send through on iOS, iOS does not persist emulator state between calls\n    this.emulatorHost = undefined;\n    this.emulatorPort = 0;\n    this._maxUploadRetryTime = this.native.maxUploadRetryTime || 0;\n    this._maxDownloadRetryTime = this.native.maxDownloadRetryTime || 0;\n    this._maxOperationRetryTime = this.native.maxOperationRetryTime || 0;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setmaxuploadretrytime\n   */\n  get maxUploadRetryTime() {\n    return this._maxUploadRetryTime;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setmaxdownloadretrytime\n   */\n  get maxDownloadRetryTime() {\n    return this._maxDownloadRetryTime;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#maxoperationretrytime\n   */\n  get maxOperationRetryTime() {\n    return this._maxOperationRetryTime;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#ref\n   */\n  ref(path = '/') {\n    if (!isString(path)) {\n      throw new Error(\"firebase.storage().ref(*) 'path' must be a string value.\");\n    }\n\n    return new StorageReference(this, path);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#refFromURL\n   */\n  refFromURL(url) {\n    if (!isString(url) || (!url.startsWith('gs://') && !url.startsWith('http'))) {\n      throw new Error(\n        \"firebase.storage().refFromURL(*) 'url' must be a string value and begin with 'gs://' or 'https://'.\",\n      );\n    }\n\n    let path;\n    let bucket;\n\n    if (url.startsWith('http')) {\n      const parts = getHttpUrlParts(url);\n      if (!parts) {\n        throw new Error(\n          \"firebase.storage().refFromURL(*) unable to parse 'url', ensure it's a valid storage url'.\",\n        );\n      }\n      ({ bucket, path } = parts);\n    } else {\n      ({ bucket, path } = getGsUrlParts(url));\n    }\n\n    const storageInstance = this.app.storage(bucket);\n    return new StorageReference(storageInstance, path);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxOperationRetryTime\n   */\n  setMaxOperationRetryTime(time) {\n    if (!isNumber(time)) {\n      throw new Error(\n        \"firebase.storage().setMaxOperationRetryTime(*) 'time' must be a number value.\",\n      );\n    }\n\n    this._maxOperationRetryTime = time;\n    return this.native.setMaxOperationRetryTime(time);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxUploadRetryTime\n   */\n  setMaxUploadRetryTime(time) {\n    if (!isNumber(time)) {\n      throw new Error(\"firebase.storage().setMaxUploadRetryTime(*) 'time' must be a number value.\");\n    }\n\n    this._maxUploadRetryTime = time;\n    return this.native.setMaxUploadRetryTime(time);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxDownloadRetryTime\n   */\n  setMaxDownloadRetryTime(time) {\n    if (!isNumber(time)) {\n      throw new Error(\n        \"firebase.storage().setMaxDownloadRetryTime(*) 'time' must be a number value.\",\n      );\n    }\n\n    this._maxDownloadRetryTime = time;\n    return this.native.setMaxDownloadRetryTime(time);\n  }\n\n  useEmulator(host, port) {\n    if (!host || !isString(host) || !port || !isNumber(port)) {\n      throw new Error('firebase.storage().useEmulator() takes a non-empty host and port');\n    }\n    let _host = host;\n    if (isAndroid && _host) {\n      if (_host === 'localhost' || _host === '127.0.0.1') {\n        _host = '10.0.2.2';\n        // eslint-disable-next-line no-console\n        console.log(\n          'Mapping storage host to \"10.0.2.2\" for android emulators. Use real IP on real devices.',\n        );\n      }\n    }\n    this.emulatorHost = host;\n    this.emulatorPort = port;\n    this.native.useEmulator(_host, port);\n    return [_host, port]; // undocumented return, just used to unit test android host remapping\n  }\n}\n\n// import { SDK_VERSION } from '@react-native-firebase/storage';\nexport const SDK_VERSION = version;\n\n// import { STATICS } from '@react-native-firebase/storage';\nexport const STATICS = StorageStatics;\n\n// import storage from '@react-native-firebase/storage';\n// storage().X(...);\nexport default createModuleNamespace({\n  statics: StorageStatics,\n  version,\n  namespace,\n  nativeEvents,\n  nativeModuleName,\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: true,\n  disablePrependCustomUrlOrRegion: true,\n  ModuleClass: FirebaseStorageModule,\n});\n\n// import storage, { firebase } from '@react-native-firebase/storage';\n// storage().X(...);\n// firebase.storage().X(...);\nexport const firebase = getFirebaseRoot();\n"]},"metadata":{},"sourceType":"module"}