{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { isFunction, isNull, isObject } from '@react-native-firebase/app/lib/common';\nimport StorageStatics from './StorageStatics';\nlet TASK_ID = 0;\n\nfunction wrapErrorEventListener(listenerFn, unsubscribe) {\n  return event => {\n    if (unsubscribe) {\n      setTimeout(() => unsubscribe(), 0);\n    } // 1 frame = 16ms, pushing to next frame\n\n\n    if (isFunction(listenerFn)) {\n      listenerFn(event.error);\n    }\n  };\n}\n\nfunction wrapSnapshotEventListener(task, listenerFn, unsubscribe) {\n  if (!isFunction(listenerFn)) {\n    return null;\n  }\n\n  return event => {\n    if (unsubscribe) {\n      setTimeout(() => unsubscribe(), 0);\n    } // 1 frame = 16ms, pushing to next frame\n\n\n    if (isFunction(listenerFn)) {\n      const snapshot = Object.assign({}, event);\n      snapshot.task = task;\n      snapshot.ref = task._ref;\n\n      if (snapshot.metadata) {\n        if (!snapshot.metadata.generation) {\n          snapshot.metadata.generation = '';\n        }\n\n        if (!snapshot.metadata.bucket) {\n          snapshot.metadata.bucket = task._ref.bucket;\n        }\n\n        if (!snapshot.metadata.metageneration) {\n          snapshot.metadata.metageneration = '';\n        } // // TODO(salakar): these are always here, cannot repro without, remove in 6.1.0 if no issues:\n        // if (!snapshot.metadata.name) snapshot.metadata.name = task._ref.name;\n        // if (!snapshot.metadata.fullPath) snapshot.metadata.fullPath = task._ref.fullPath;\n\n      }\n\n      Object.freeze(snapshot);\n      task._snapshot = snapshot;\n      listenerFn(snapshot);\n    }\n  };\n}\n\nfunction addTaskEventListener(task, eventName, listener) {\n  let _eventName = eventName;\n\n  if (_eventName !== StorageStatics.TaskEvent.STATE_CHANGED) {\n    _eventName = `${task._type}_${eventName}`;\n  }\n\n  return task._storage.emitter.addListener(task._storage.eventNameForApp(task._id, _eventName), listener);\n}\n\nfunction subscribeToEvents(task, nextOrObserver, error, complete) {\n  let _error;\n\n  let _errorSubscription;\n\n  let _next;\n\n  let _nextSubscription;\n\n  let _complete;\n\n  let _completeSubscription;\n\n  const unsubscribe = () => {\n    if (_nextSubscription) {\n      _nextSubscription.remove();\n    }\n\n    if (_errorSubscription) {\n      _errorSubscription.remove();\n    }\n\n    if (_completeSubscription) {\n      _completeSubscription.remove();\n    }\n  };\n\n  if (isFunction(nextOrObserver)) {\n    _error = wrapErrorEventListener(error, unsubscribe);\n    _next = wrapSnapshotEventListener(task, nextOrObserver);\n    _complete = wrapSnapshotEventListener(task, complete, unsubscribe);\n  } else if (isObject(nextOrObserver)) {\n    _error = wrapErrorEventListener(nextOrObserver.error, unsubscribe);\n    _next = wrapSnapshotEventListener(task, nextOrObserver.next);\n    _complete = wrapSnapshotEventListener(task, nextOrObserver.complete, unsubscribe);\n  } else if (isNull(nextOrObserver)) {\n    _error = wrapErrorEventListener(error, unsubscribe);\n    _complete = wrapSnapshotEventListener(task, complete, unsubscribe);\n  } else {\n    throw new Error(\"firebase.storage.StorageTask.on(*, _) 'nextOrObserver' must be a Function, an Object or Null.\");\n  }\n\n  if (_next) {\n    _nextSubscription = addTaskEventListener(task, StorageStatics.TaskEvent.STATE_CHANGED, _next);\n  }\n\n  if (_error) {\n    _errorSubscription = addTaskEventListener(task, 'failure', _error);\n  }\n\n  if (_complete) {\n    _completeSubscription = addTaskEventListener(task, 'success', _complete);\n  }\n\n  return unsubscribe;\n}\n\nexport default class StorageTask {\n  constructor(type, storageRef, beginTaskFn) {\n    this._type = type;\n    this._id = TASK_ID++;\n    this._promise = null;\n    this._ref = storageRef;\n    this._beginTask = beginTaskFn;\n    this._storage = storageRef._storage;\n    this._snapshot = null;\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#then\n   */\n\n\n  get then() {\n    if (!this._promise) {\n      this._promise = this._beginTask(this);\n    }\n\n    return new Promise((resolve, reject) => {\n      const boundPromise = this._promise.then.bind(this._promise);\n\n      boundPromise(response => {\n        this._snapshot = { ...response,\n          ref: this._ref,\n          task: this\n        };\n        resolve(response);\n      }).catch(error => {\n        reject(error);\n      });\n    }).then.bind(this._promise);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#catch\n   */\n\n\n  get catch() {\n    if (!this._promise) {\n      this._promise = this._beginTask(this);\n    }\n\n    return this._promise.catch.bind(this._promise);\n  }\n\n  get snapshot() {\n    return this._snapshot;\n  } // // NOT on Web SDK\n  // /**\n  //  * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#finally\n  //  */\n  // get finally() {\n  //   if (!this._promise) this._promise = this._beginTask(this);\n  //   return this._promise.finally.bind(this._promise);\n  // }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#on\n   */\n\n\n  on(event, nextOrObserver, error, complete) {\n    if (event !== StorageStatics.TaskEvent.STATE_CHANGED) {\n      throw new Error(`firebase.storage.StorageTask.on event argument must be a string with a value of '${StorageStatics.TaskEvent.STATE_CHANGED}'`);\n    }\n\n    if (!this._promise) {\n      this._promise = this._beginTask(this);\n    } // if only event provided return the subscriber function\n\n\n    if (!nextOrObserver && !error && !complete) {\n      return subscribeToEvents.bind(null, this);\n    }\n\n    return subscribeToEvents(this, nextOrObserver, error, complete);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#pause\n   */\n\n\n  pause() {\n    return this._storage.native.setTaskStatus(this._id, 0);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#resume\n   */\n\n\n  resume() {\n    return this._storage.native.setTaskStatus(this._id, 1);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#cancel\n   */\n\n\n  cancel() {\n    return this._storage.native.setTaskStatus(this._id, 2);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/macie/Desktop/AutoRent-client-main/node_modules/@react-native-firebase/storage/lib/StorageTask.js"],"names":["isFunction","isNull","isObject","StorageStatics","TASK_ID","wrapErrorEventListener","listenerFn","unsubscribe","event","setTimeout","error","wrapSnapshotEventListener","task","snapshot","Object","assign","ref","_ref","metadata","generation","bucket","metageneration","freeze","_snapshot","addTaskEventListener","eventName","listener","_eventName","TaskEvent","STATE_CHANGED","_type","_storage","emitter","addListener","eventNameForApp","_id","subscribeToEvents","nextOrObserver","complete","_error","_errorSubscription","_next","_nextSubscription","_complete","_completeSubscription","remove","next","Error","StorageTask","constructor","type","storageRef","beginTaskFn","_promise","_beginTask","then","Promise","resolve","reject","boundPromise","bind","response","catch","on","pause","native","setTaskStatus","resume","cancel"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isFunction, isNull, isObject } from '@react-native-firebase/app/lib/common';\nimport StorageStatics from './StorageStatics';\n\nlet TASK_ID = 0;\n\nfunction wrapErrorEventListener(listenerFn, unsubscribe) {\n  return event => {\n    if (unsubscribe) {\n      setTimeout(() => unsubscribe(), 0);\n    } // 1 frame = 16ms, pushing to next frame\n    if (isFunction(listenerFn)) {\n      listenerFn(event.error);\n    }\n  };\n}\n\nfunction wrapSnapshotEventListener(task, listenerFn, unsubscribe) {\n  if (!isFunction(listenerFn)) {\n    return null;\n  }\n  return event => {\n    if (unsubscribe) {\n      setTimeout(() => unsubscribe(), 0);\n    } // 1 frame = 16ms, pushing to next frame\n    if (isFunction(listenerFn)) {\n      const snapshot = Object.assign({}, event);\n      snapshot.task = task;\n      snapshot.ref = task._ref;\n\n      if (snapshot.metadata) {\n        if (!snapshot.metadata.generation) {\n          snapshot.metadata.generation = '';\n        }\n        if (!snapshot.metadata.bucket) {\n          snapshot.metadata.bucket = task._ref.bucket;\n        }\n        if (!snapshot.metadata.metageneration) {\n          snapshot.metadata.metageneration = '';\n        }\n        // // TODO(salakar): these are always here, cannot repro without, remove in 6.1.0 if no issues:\n        // if (!snapshot.metadata.name) snapshot.metadata.name = task._ref.name;\n        // if (!snapshot.metadata.fullPath) snapshot.metadata.fullPath = task._ref.fullPath;\n      }\n\n      Object.freeze(snapshot);\n      task._snapshot = snapshot;\n\n      listenerFn(snapshot);\n    }\n  };\n}\n\nfunction addTaskEventListener(task, eventName, listener) {\n  let _eventName = eventName;\n  if (_eventName !== StorageStatics.TaskEvent.STATE_CHANGED) {\n    _eventName = `${task._type}_${eventName}`;\n  }\n\n  return task._storage.emitter.addListener(\n    task._storage.eventNameForApp(task._id, _eventName),\n    listener,\n  );\n}\n\nfunction subscribeToEvents(task, nextOrObserver, error, complete) {\n  let _error;\n  let _errorSubscription;\n\n  let _next;\n  let _nextSubscription;\n\n  let _complete;\n  let _completeSubscription;\n\n  const unsubscribe = () => {\n    if (_nextSubscription) {\n      _nextSubscription.remove();\n    }\n    if (_errorSubscription) {\n      _errorSubscription.remove();\n    }\n    if (_completeSubscription) {\n      _completeSubscription.remove();\n    }\n  };\n\n  if (isFunction(nextOrObserver)) {\n    _error = wrapErrorEventListener(error, unsubscribe);\n    _next = wrapSnapshotEventListener(task, nextOrObserver);\n    _complete = wrapSnapshotEventListener(task, complete, unsubscribe);\n  } else if (isObject(nextOrObserver)) {\n    _error = wrapErrorEventListener(nextOrObserver.error, unsubscribe);\n    _next = wrapSnapshotEventListener(task, nextOrObserver.next);\n    _complete = wrapSnapshotEventListener(task, nextOrObserver.complete, unsubscribe);\n  } else if (isNull(nextOrObserver)) {\n    _error = wrapErrorEventListener(error, unsubscribe);\n    _complete = wrapSnapshotEventListener(task, complete, unsubscribe);\n  } else {\n    throw new Error(\n      \"firebase.storage.StorageTask.on(*, _) 'nextOrObserver' must be a Function, an Object or Null.\",\n    );\n  }\n\n  if (_next) {\n    _nextSubscription = addTaskEventListener(task, StorageStatics.TaskEvent.STATE_CHANGED, _next);\n  }\n\n  if (_error) {\n    _errorSubscription = addTaskEventListener(task, 'failure', _error);\n  }\n\n  if (_complete) {\n    _completeSubscription = addTaskEventListener(task, 'success', _complete);\n  }\n\n  return unsubscribe;\n}\n\nexport default class StorageTask {\n  constructor(type, storageRef, beginTaskFn) {\n    this._type = type;\n    this._id = TASK_ID++;\n    this._promise = null;\n    this._ref = storageRef;\n    this._beginTask = beginTaskFn;\n    this._storage = storageRef._storage;\n    this._snapshot = null;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#then\n   */\n  get then() {\n    if (!this._promise) {\n      this._promise = this._beginTask(this);\n    }\n\n    return new Promise((resolve, reject) => {\n      const boundPromise = this._promise.then.bind(this._promise);\n\n      boundPromise(response => {\n        this._snapshot = { ...response, ref: this._ref, task: this };\n        resolve(response);\n      }).catch(error => {\n        reject(error);\n      });\n    }).then.bind(this._promise);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#catch\n   */\n  get catch() {\n    if (!this._promise) {\n      this._promise = this._beginTask(this);\n    }\n    return this._promise.catch.bind(this._promise);\n  }\n\n  get snapshot() {\n    return this._snapshot;\n  }\n\n  // // NOT on Web SDK\n  // /**\n  //  * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#finally\n  //  */\n  // get finally() {\n  //   if (!this._promise) this._promise = this._beginTask(this);\n  //   return this._promise.finally.bind(this._promise);\n  // }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#on\n   */\n  on(event, nextOrObserver, error, complete) {\n    if (event !== StorageStatics.TaskEvent.STATE_CHANGED) {\n      throw new Error(\n        `firebase.storage.StorageTask.on event argument must be a string with a value of '${StorageStatics.TaskEvent.STATE_CHANGED}'`,\n      );\n    }\n\n    if (!this._promise) {\n      this._promise = this._beginTask(this);\n    }\n\n    // if only event provided return the subscriber function\n    if (!nextOrObserver && !error && !complete) {\n      return subscribeToEvents.bind(null, this);\n    }\n\n    return subscribeToEvents(this, nextOrObserver, error, complete);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#pause\n   */\n  pause() {\n    return this._storage.native.setTaskStatus(this._id, 0);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#resume\n   */\n  resume() {\n    return this._storage.native.setTaskStatus(this._id, 1);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#cancel\n   */\n  cancel() {\n    return this._storage.native.setTaskStatus(this._id, 2);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}