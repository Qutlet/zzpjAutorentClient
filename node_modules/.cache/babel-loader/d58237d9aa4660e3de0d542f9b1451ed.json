{"ast":null,"code":"/* eslint-disable no-console */\n\n/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { Base64, getDataUrlParts, hasOwnProperty, isInteger, isNumber, isObject, isString, isUndefined, pathChild, pathLastComponent, pathParent, ReferenceBase, toFilePath } from '@react-native-firebase/app/lib/common';\nimport StorageDownloadTask from './StorageDownloadTask';\nimport StorageListResult, { provideStorageReferenceClass } from './StorageListResult';\nimport StorageStatics from './StorageStatics';\nimport StorageUploadTask from './StorageUploadTask';\nimport { validateMetadata } from './utils';\nexport default class StorageReference extends ReferenceBase {\n  constructor(storage, path) {\n    super(path);\n    this._storage = storage;\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#bucket\n   */\n\n\n  get bucket() {\n    return this._storage._customUrlOrRegion.replace('gs://', '');\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#fullPath\n   */\n\n\n  get fullPath() {\n    return this.path;\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#name\n   */\n\n\n  get name() {\n    return pathLastComponent(this.path);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#parent\n   */\n\n\n  get parent() {\n    const parentPath = pathParent(this.path);\n\n    if (parentPath === null) {\n      return parentPath;\n    }\n\n    return new StorageReference(this._storage, parentPath);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#root\n   */\n\n\n  get root() {\n    return new StorageReference(this._storage, '/');\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#storage\n   */\n\n\n  get storage() {\n    return this._storage;\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#child\n   */\n\n\n  child(path) {\n    const childPath = pathChild(this.path, path);\n    return new StorageReference(this._storage, childPath);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#delete\n   */\n\n\n  delete() {\n    return this._storage.native.delete(this.toString());\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#getDownloadURL\n   */\n\n\n  getDownloadURL() {\n    return this._storage.native.getDownloadURL(this.toString());\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#getMetadata\n   */\n\n\n  getMetadata() {\n    return this._storage.native.getMetadata(this.toString());\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#list\n   */\n\n\n  list(options) {\n    if (!isUndefined(options) && !isObject(options)) {\n      throw new Error(\"firebase.storage.StorageReference.list(*) 'options' expected an object value.\");\n    }\n\n    const listOptions = {\n      maxResults: 1000\n    };\n\n    if (options) {\n      if (hasOwnProperty(options, 'maxResults')) {\n        if (!isNumber(options.maxResults) || !isInteger(options.maxResults)) {\n          throw new Error(\"firebase.storage.StorageReference.list(*) 'options.maxResults' expected a number value.\");\n        }\n\n        if (options.maxResults < 1 || options.maxResults > 1000) {\n          throw new Error(\"firebase.storage.StorageReference.list(*) 'options.maxResults' expected a number value between 1-1000.\");\n        }\n\n        listOptions.maxResults = options.maxResults;\n      }\n\n      if (options.pageToken) {\n        if (!isString(options.pageToken)) {\n          throw new Error(\"firebase.storage.StorageReference.list(*) 'options.pageToken' expected a string value.\");\n        }\n\n        listOptions.pageToken = options.pageToken;\n      }\n    }\n\n    return this._storage.native.list(this.toString(), listOptions).then(data => new StorageListResult(this._storage, data));\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#listAll\n   */\n\n\n  listAll() {\n    return this._storage.native.listAll(this.toString()).then(data => new StorageListResult(this._storage, data));\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#put\n   */\n\n\n  put(data, metadata) {\n    if (!isUndefined(metadata)) {\n      validateMetadata(metadata, false);\n    }\n\n    return new StorageUploadTask(this, task => Base64.fromData(data).then(({\n      string,\n      format\n    }) => {\n      const {\n        _string,\n        _format,\n        _metadata\n      } = this._updateString(string, format, metadata, false);\n\n      return this._storage.native.putString(this.toString(), _string, _format, _metadata, task._id);\n    }));\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#putString\n   */\n\n\n  putString(string, format = StorageStatics.StringFormat.RAW, metadata) {\n    const {\n      _string,\n      _format,\n      _metadata\n    } = this._updateString(string, format, metadata, false);\n\n    return new StorageUploadTask(this, task => this._storage.native.putString(this.toString(), _string, _format, _metadata, task._id));\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#fullPath\n   */\n\n\n  toString() {\n    if (this.path.length <= 1) {\n      return `${this._storage._customUrlOrRegion}`;\n    }\n\n    return `${this._storage._customUrlOrRegion}/${this.path}`;\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#updateMetadata\n   */\n\n\n  updateMetadata(metadata) {\n    validateMetadata(metadata);\n    return this._storage.native.updateMetadata(this.toString(), metadata);\n  }\n  /* ----------------------------------------\n   *   EXTRA APIS (DO NOT ON EXIST WEB SDK)\n   * ---------------------------------------- */\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference\n   */\n\n\n  writeToFile(filePath) {\n    if (!isString(filePath)) {\n      throw new Error(\"firebase.storage.StorageReference.writeToFile(*) 'filePath' expects a string value.\");\n    }\n\n    return new StorageDownloadTask(this, task => this._storage.native.writeToFile(this.toString(), toFilePath(filePath), task._id));\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference\n   */\n\n\n  putFile(filePath, metadata) {\n    if (!isUndefined(metadata)) {\n      validateMetadata(metadata, false);\n    }\n\n    if (!isString(filePath)) {\n      throw new Error(\"firebase.storage.StorageReference.putFile(*, _) 'filePath' expects a string value.\");\n    }\n\n    return new StorageUploadTask(this, task => this._storage.native.putFile(this.toString(), toFilePath(filePath), metadata, task._id));\n  }\n\n  _updateString(string, format, metadata, update = false) {\n    if (!isString(string)) {\n      throw new Error(\"firebase.storage.StorageReference.putString(*, _, _) 'string' expects a string value.\");\n    }\n\n    if (!Object.values(StorageStatics.StringFormat).includes(format)) {\n      throw new Error(`firebase.storage.StorageReference.putString(_, *, _) 'format' provided is invalid, must be one of ${Object.values(StorageStatics.StringFormat).join(',')}.`);\n    }\n\n    if (!isUndefined(metadata)) {\n      validateMetadata(metadata, update);\n    }\n\n    let _string = string;\n    let _format = format;\n    let _metadata = metadata;\n\n    if (format === StorageStatics.StringFormat.RAW) {\n      _string = Base64.btoa(_string);\n      _format = StorageStatics.StringFormat.BASE64;\n    } else if (format === StorageStatics.StringFormat.DATA_URL) {\n      const {\n        mediaType,\n        base64String\n      } = getDataUrlParts(_string);\n\n      if (isUndefined(base64String)) {\n        throw new Error('firebase.storage.StorageReference.putString(*, _, _) invalid data_url string provided.');\n      }\n\n      if (isUndefined(metadata) || isUndefined(metadata.contentType)) {\n        if (isUndefined(metadata)) {\n          _metadata = {};\n        }\n\n        _metadata.contentType = mediaType;\n        _string = base64String;\n        _format = StorageStatics.StringFormat.BASE64;\n      }\n    }\n\n    return {\n      _string,\n      _metadata,\n      _format\n    };\n  }\n\n}\nprovideStorageReferenceClass(StorageReference);","map":{"version":3,"sources":["C:/Users/macie/Desktop/AutoRent-client-main/node_modules/@react-native-firebase/storage/lib/StorageReference.js"],"names":["Base64","getDataUrlParts","hasOwnProperty","isInteger","isNumber","isObject","isString","isUndefined","pathChild","pathLastComponent","pathParent","ReferenceBase","toFilePath","StorageDownloadTask","StorageListResult","provideStorageReferenceClass","StorageStatics","StorageUploadTask","validateMetadata","StorageReference","constructor","storage","path","_storage","bucket","_customUrlOrRegion","replace","fullPath","name","parent","parentPath","root","child","childPath","delete","native","toString","getDownloadURL","getMetadata","list","options","Error","listOptions","maxResults","pageToken","then","data","listAll","put","metadata","task","fromData","string","format","_string","_format","_metadata","_updateString","putString","_id","StringFormat","RAW","length","updateMetadata","writeToFile","filePath","putFile","update","Object","values","includes","join","btoa","BASE64","DATA_URL","mediaType","base64String","contentType"],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACEA,MADF,EAEEC,eAFF,EAGEC,cAHF,EAIEC,SAJF,EAKEC,QALF,EAMEC,QANF,EAOEC,QAPF,EAQEC,WARF,EASEC,SATF,EAUEC,iBAVF,EAWEC,UAXF,EAYEC,aAZF,EAaEC,UAbF,QAcO,uCAdP;AAeA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,iBAAP,IAA4BC,4BAA5B,QAAgE,qBAAhE;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,gBAAT,QAAiC,SAAjC;AAEA,eAAe,MAAMC,gBAAN,SAA+BR,aAA/B,CAA6C;AAC1DS,EAAAA,WAAW,CAACC,OAAD,EAAUC,IAAV,EAAgB;AACzB,UAAMA,IAAN;AACA,SAAKC,QAAL,GAAgBF,OAAhB;AACD;AAED;AACF;AACA;;;AACE,MAAIG,MAAJ,GAAa;AACX,WAAO,KAAKD,QAAL,CAAcE,kBAAd,CAAiCC,OAAjC,CAAyC,OAAzC,EAAkD,EAAlD,CAAP;AACD;AAED;AACF;AACA;;;AACE,MAAIC,QAAJ,GAAe;AACb,WAAO,KAAKL,IAAZ;AACD;AAED;AACF;AACA;;;AACE,MAAIM,IAAJ,GAAW;AACT,WAAOnB,iBAAiB,CAAC,KAAKa,IAAN,CAAxB;AACD;AAED;AACF;AACA;;;AACE,MAAIO,MAAJ,GAAa;AACX,UAAMC,UAAU,GAAGpB,UAAU,CAAC,KAAKY,IAAN,CAA7B;;AACA,QAAIQ,UAAU,KAAK,IAAnB,EAAyB;AACvB,aAAOA,UAAP;AACD;;AACD,WAAO,IAAIX,gBAAJ,CAAqB,KAAKI,QAA1B,EAAoCO,UAApC,CAAP;AACD;AAED;AACF;AACA;;;AACE,MAAIC,IAAJ,GAAW;AACT,WAAO,IAAIZ,gBAAJ,CAAqB,KAAKI,QAA1B,EAAoC,GAApC,CAAP;AACD;AAED;AACF;AACA;;;AACE,MAAIF,OAAJ,GAAc;AACZ,WAAO,KAAKE,QAAZ;AACD;AAED;AACF;AACA;;;AACES,EAAAA,KAAK,CAACV,IAAD,EAAO;AACV,UAAMW,SAAS,GAAGzB,SAAS,CAAC,KAAKc,IAAN,EAAYA,IAAZ,CAA3B;AACA,WAAO,IAAIH,gBAAJ,CAAqB,KAAKI,QAA1B,EAAoCU,SAApC,CAAP;AACD;AAED;AACF;AACA;;;AACEC,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKX,QAAL,CAAcY,MAAd,CAAqBD,MAArB,CAA4B,KAAKE,QAAL,EAA5B,CAAP;AACD;AAED;AACF;AACA;;;AACEC,EAAAA,cAAc,GAAG;AACf,WAAO,KAAKd,QAAL,CAAcY,MAAd,CAAqBE,cAArB,CAAoC,KAAKD,QAAL,EAApC,CAAP;AACD;AAED;AACF;AACA;;;AACEE,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKf,QAAL,CAAcY,MAAd,CAAqBG,WAArB,CAAiC,KAAKF,QAAL,EAAjC,CAAP;AACD;AAED;AACF;AACA;;;AACEG,EAAAA,IAAI,CAACC,OAAD,EAAU;AACZ,QAAI,CAACjC,WAAW,CAACiC,OAAD,CAAZ,IAAyB,CAACnC,QAAQ,CAACmC,OAAD,CAAtC,EAAiD;AAC/C,YAAM,IAAIC,KAAJ,CACJ,+EADI,CAAN;AAGD;;AAED,UAAMC,WAAW,GAAG;AAClBC,MAAAA,UAAU,EAAE;AADM,KAApB;;AAIA,QAAIH,OAAJ,EAAa;AACX,UAAItC,cAAc,CAACsC,OAAD,EAAU,YAAV,CAAlB,EAA2C;AACzC,YAAI,CAACpC,QAAQ,CAACoC,OAAO,CAACG,UAAT,CAAT,IAAiC,CAACxC,SAAS,CAACqC,OAAO,CAACG,UAAT,CAA/C,EAAqE;AACnE,gBAAM,IAAIF,KAAJ,CACJ,yFADI,CAAN;AAGD;;AAED,YAAID,OAAO,CAACG,UAAR,GAAqB,CAArB,IAA0BH,OAAO,CAACG,UAAR,GAAqB,IAAnD,EAAyD;AACvD,gBAAM,IAAIF,KAAJ,CACJ,wGADI,CAAN;AAGD;;AAEDC,QAAAA,WAAW,CAACC,UAAZ,GAAyBH,OAAO,CAACG,UAAjC;AACD;;AAED,UAAIH,OAAO,CAACI,SAAZ,EAAuB;AACrB,YAAI,CAACtC,QAAQ,CAACkC,OAAO,CAACI,SAAT,CAAb,EAAkC;AAChC,gBAAM,IAAIH,KAAJ,CACJ,wFADI,CAAN;AAGD;;AAEDC,QAAAA,WAAW,CAACE,SAAZ,GAAwBJ,OAAO,CAACI,SAAhC;AACD;AACF;;AAED,WAAO,KAAKrB,QAAL,CAAcY,MAAd,CACJI,IADI,CACC,KAAKH,QAAL,EADD,EACkBM,WADlB,EAEJG,IAFI,CAECC,IAAI,IAAI,IAAIhC,iBAAJ,CAAsB,KAAKS,QAA3B,EAAqCuB,IAArC,CAFT,CAAP;AAGD;AAED;AACF;AACA;;;AACEC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKxB,QAAL,CAAcY,MAAd,CACJY,OADI,CACI,KAAKX,QAAL,EADJ,EAEJS,IAFI,CAECC,IAAI,IAAI,IAAIhC,iBAAJ,CAAsB,KAAKS,QAA3B,EAAqCuB,IAArC,CAFT,CAAP;AAGD;AAED;AACF;AACA;;;AACEE,EAAAA,GAAG,CAACF,IAAD,EAAOG,QAAP,EAAiB;AAClB,QAAI,CAAC1C,WAAW,CAAC0C,QAAD,CAAhB,EAA4B;AAC1B/B,MAAAA,gBAAgB,CAAC+B,QAAD,EAAW,KAAX,CAAhB;AACD;;AAED,WAAO,IAAIhC,iBAAJ,CAAsB,IAAtB,EAA4BiC,IAAI,IACrClD,MAAM,CAACmD,QAAP,CAAgBL,IAAhB,EAAsBD,IAAtB,CAA2B,CAAC;AAAEO,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAD,KAAwB;AACjD,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,OAAX;AAAoBC,QAAAA;AAApB,UAAkC,KAAKC,aAAL,CAAmBL,MAAnB,EAA2BC,MAA3B,EAAmCJ,QAAnC,EAA6C,KAA7C,CAAxC;;AACA,aAAO,KAAK1B,QAAL,CAAcY,MAAd,CAAqBuB,SAArB,CACL,KAAKtB,QAAL,EADK,EAELkB,OAFK,EAGLC,OAHK,EAILC,SAJK,EAKLN,IAAI,CAACS,GALA,CAAP;AAOD,KATD,CADK,CAAP;AAYD;AAED;AACF;AACA;;;AACED,EAAAA,SAAS,CAACN,MAAD,EAASC,MAAM,GAAGrC,cAAc,CAAC4C,YAAf,CAA4BC,GAA9C,EAAmDZ,QAAnD,EAA6D;AACpE,UAAM;AAAEK,MAAAA,OAAF;AAAWC,MAAAA,OAAX;AAAoBC,MAAAA;AAApB,QAAkC,KAAKC,aAAL,CAAmBL,MAAnB,EAA2BC,MAA3B,EAAmCJ,QAAnC,EAA6C,KAA7C,CAAxC;;AAEA,WAAO,IAAIhC,iBAAJ,CAAsB,IAAtB,EAA4BiC,IAAI,IACrC,KAAK3B,QAAL,CAAcY,MAAd,CAAqBuB,SAArB,CAA+B,KAAKtB,QAAL,EAA/B,EAAgDkB,OAAhD,EAAyDC,OAAzD,EAAkEC,SAAlE,EAA6EN,IAAI,CAACS,GAAlF,CADK,CAAP;AAGD;AAED;AACF;AACA;;;AACEvB,EAAAA,QAAQ,GAAG;AACT,QAAI,KAAKd,IAAL,CAAUwC,MAAV,IAAoB,CAAxB,EAA2B;AACzB,aAAQ,GAAE,KAAKvC,QAAL,CAAcE,kBAAmB,EAA3C;AACD;;AAED,WAAQ,GAAE,KAAKF,QAAL,CAAcE,kBAAmB,IAAG,KAAKH,IAAK,EAAxD;AACD;AAED;AACF;AACA;;;AACEyC,EAAAA,cAAc,CAACd,QAAD,EAAW;AACvB/B,IAAAA,gBAAgB,CAAC+B,QAAD,CAAhB;AACA,WAAO,KAAK1B,QAAL,CAAcY,MAAd,CAAqB4B,cAArB,CAAoC,KAAK3B,QAAL,EAApC,EAAqDa,QAArD,CAAP;AACD;AAED;AACF;AACA;;AAEE;AACF;AACA;;;AACEe,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB,QAAI,CAAC3D,QAAQ,CAAC2D,QAAD,CAAb,EAAyB;AACvB,YAAM,IAAIxB,KAAJ,CACJ,qFADI,CAAN;AAGD;;AAED,WAAO,IAAI5B,mBAAJ,CAAwB,IAAxB,EAA8BqC,IAAI,IACvC,KAAK3B,QAAL,CAAcY,MAAd,CAAqB6B,WAArB,CAAiC,KAAK5B,QAAL,EAAjC,EAAkDxB,UAAU,CAACqD,QAAD,CAA5D,EAAwEf,IAAI,CAACS,GAA7E,CADK,CAAP;AAGD;AAED;AACF;AACA;;;AACEO,EAAAA,OAAO,CAACD,QAAD,EAAWhB,QAAX,EAAqB;AAC1B,QAAI,CAAC1C,WAAW,CAAC0C,QAAD,CAAhB,EAA4B;AAC1B/B,MAAAA,gBAAgB,CAAC+B,QAAD,EAAW,KAAX,CAAhB;AACD;;AAED,QAAI,CAAC3C,QAAQ,CAAC2D,QAAD,CAAb,EAAyB;AACvB,YAAM,IAAIxB,KAAJ,CACJ,oFADI,CAAN;AAGD;;AAED,WAAO,IAAIxB,iBAAJ,CAAsB,IAAtB,EAA4BiC,IAAI,IACrC,KAAK3B,QAAL,CAAcY,MAAd,CAAqB+B,OAArB,CAA6B,KAAK9B,QAAL,EAA7B,EAA8CxB,UAAU,CAACqD,QAAD,CAAxD,EAAoEhB,QAApE,EAA8EC,IAAI,CAACS,GAAnF,CADK,CAAP;AAGD;;AAEDF,EAAAA,aAAa,CAACL,MAAD,EAASC,MAAT,EAAiBJ,QAAjB,EAA2BkB,MAAM,GAAG,KAApC,EAA2C;AACtD,QAAI,CAAC7D,QAAQ,CAAC8C,MAAD,CAAb,EAAuB;AACrB,YAAM,IAAIX,KAAJ,CACJ,uFADI,CAAN;AAGD;;AAED,QAAI,CAAC2B,MAAM,CAACC,MAAP,CAAcrD,cAAc,CAAC4C,YAA7B,EAA2CU,QAA3C,CAAoDjB,MAApD,CAAL,EAAkE;AAChE,YAAM,IAAIZ,KAAJ,CACH,qGAAoG2B,MAAM,CAACC,MAAP,CACnGrD,cAAc,CAAC4C,YADoF,EAEnGW,IAFmG,CAE9F,GAF8F,CAEzF,GAHR,CAAN;AAKD;;AAED,QAAI,CAAChE,WAAW,CAAC0C,QAAD,CAAhB,EAA4B;AAC1B/B,MAAAA,gBAAgB,CAAC+B,QAAD,EAAWkB,MAAX,CAAhB;AACD;;AAED,QAAIb,OAAO,GAAGF,MAAd;AACA,QAAIG,OAAO,GAAGF,MAAd;AACA,QAAIG,SAAS,GAAGP,QAAhB;;AAEA,QAAII,MAAM,KAAKrC,cAAc,CAAC4C,YAAf,CAA4BC,GAA3C,EAAgD;AAC9CP,MAAAA,OAAO,GAAGtD,MAAM,CAACwE,IAAP,CAAYlB,OAAZ,CAAV;AACAC,MAAAA,OAAO,GAAGvC,cAAc,CAAC4C,YAAf,CAA4Ba,MAAtC;AACD,KAHD,MAGO,IAAIpB,MAAM,KAAKrC,cAAc,CAAC4C,YAAf,CAA4Bc,QAA3C,EAAqD;AAC1D,YAAM;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAA8B3E,eAAe,CAACqD,OAAD,CAAnD;;AACA,UAAI/C,WAAW,CAACqE,YAAD,CAAf,EAA+B;AAC7B,cAAM,IAAInC,KAAJ,CACJ,wFADI,CAAN;AAGD;;AAED,UAAIlC,WAAW,CAAC0C,QAAD,CAAX,IAAyB1C,WAAW,CAAC0C,QAAQ,CAAC4B,WAAV,CAAxC,EAAgE;AAC9D,YAAItE,WAAW,CAAC0C,QAAD,CAAf,EAA2B;AACzBO,UAAAA,SAAS,GAAG,EAAZ;AACD;;AACDA,QAAAA,SAAS,CAACqB,WAAV,GAAwBF,SAAxB;AACArB,QAAAA,OAAO,GAAGsB,YAAV;AACArB,QAAAA,OAAO,GAAGvC,cAAc,CAAC4C,YAAf,CAA4Ba,MAAtC;AACD;AACF;;AACD,WAAO;AAAEnB,MAAAA,OAAF;AAAWE,MAAAA,SAAX;AAAsBD,MAAAA;AAAtB,KAAP;AACD;;AA/QyD;AAkR5DxC,4BAA4B,CAACI,gBAAD,CAA5B","sourcesContent":["/* eslint-disable no-console */\n/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  Base64,\n  getDataUrlParts,\n  hasOwnProperty,\n  isInteger,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n  pathChild,\n  pathLastComponent,\n  pathParent,\n  ReferenceBase,\n  toFilePath,\n} from '@react-native-firebase/app/lib/common';\nimport StorageDownloadTask from './StorageDownloadTask';\nimport StorageListResult, { provideStorageReferenceClass } from './StorageListResult';\nimport StorageStatics from './StorageStatics';\nimport StorageUploadTask from './StorageUploadTask';\nimport { validateMetadata } from './utils';\n\nexport default class StorageReference extends ReferenceBase {\n  constructor(storage, path) {\n    super(path);\n    this._storage = storage;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#bucket\n   */\n  get bucket() {\n    return this._storage._customUrlOrRegion.replace('gs://', '');\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#fullPath\n   */\n  get fullPath() {\n    return this.path;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#name\n   */\n  get name() {\n    return pathLastComponent(this.path);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#parent\n   */\n  get parent() {\n    const parentPath = pathParent(this.path);\n    if (parentPath === null) {\n      return parentPath;\n    }\n    return new StorageReference(this._storage, parentPath);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#root\n   */\n  get root() {\n    return new StorageReference(this._storage, '/');\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#storage\n   */\n  get storage() {\n    return this._storage;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#child\n   */\n  child(path) {\n    const childPath = pathChild(this.path, path);\n    return new StorageReference(this._storage, childPath);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#delete\n   */\n  delete() {\n    return this._storage.native.delete(this.toString());\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#getDownloadURL\n   */\n  getDownloadURL() {\n    return this._storage.native.getDownloadURL(this.toString());\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#getMetadata\n   */\n  getMetadata() {\n    return this._storage.native.getMetadata(this.toString());\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#list\n   */\n  list(options) {\n    if (!isUndefined(options) && !isObject(options)) {\n      throw new Error(\n        \"firebase.storage.StorageReference.list(*) 'options' expected an object value.\",\n      );\n    }\n\n    const listOptions = {\n      maxResults: 1000,\n    };\n\n    if (options) {\n      if (hasOwnProperty(options, 'maxResults')) {\n        if (!isNumber(options.maxResults) || !isInteger(options.maxResults)) {\n          throw new Error(\n            \"firebase.storage.StorageReference.list(*) 'options.maxResults' expected a number value.\",\n          );\n        }\n\n        if (options.maxResults < 1 || options.maxResults > 1000) {\n          throw new Error(\n            \"firebase.storage.StorageReference.list(*) 'options.maxResults' expected a number value between 1-1000.\",\n          );\n        }\n\n        listOptions.maxResults = options.maxResults;\n      }\n\n      if (options.pageToken) {\n        if (!isString(options.pageToken)) {\n          throw new Error(\n            \"firebase.storage.StorageReference.list(*) 'options.pageToken' expected a string value.\",\n          );\n        }\n\n        listOptions.pageToken = options.pageToken;\n      }\n    }\n\n    return this._storage.native\n      .list(this.toString(), listOptions)\n      .then(data => new StorageListResult(this._storage, data));\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#listAll\n   */\n  listAll() {\n    return this._storage.native\n      .listAll(this.toString())\n      .then(data => new StorageListResult(this._storage, data));\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#put\n   */\n  put(data, metadata) {\n    if (!isUndefined(metadata)) {\n      validateMetadata(metadata, false);\n    }\n\n    return new StorageUploadTask(this, task =>\n      Base64.fromData(data).then(({ string, format }) => {\n        const { _string, _format, _metadata } = this._updateString(string, format, metadata, false);\n        return this._storage.native.putString(\n          this.toString(),\n          _string,\n          _format,\n          _metadata,\n          task._id,\n        );\n      }),\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#putString\n   */\n  putString(string, format = StorageStatics.StringFormat.RAW, metadata) {\n    const { _string, _format, _metadata } = this._updateString(string, format, metadata, false);\n\n    return new StorageUploadTask(this, task =>\n      this._storage.native.putString(this.toString(), _string, _format, _metadata, task._id),\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#fullPath\n   */\n  toString() {\n    if (this.path.length <= 1) {\n      return `${this._storage._customUrlOrRegion}`;\n    }\n\n    return `${this._storage._customUrlOrRegion}/${this.path}`;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#updateMetadata\n   */\n  updateMetadata(metadata) {\n    validateMetadata(metadata);\n    return this._storage.native.updateMetadata(this.toString(), metadata);\n  }\n\n  /* ----------------------------------------\n   *   EXTRA APIS (DO NOT ON EXIST WEB SDK)\n   * ---------------------------------------- */\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference\n   */\n  writeToFile(filePath) {\n    if (!isString(filePath)) {\n      throw new Error(\n        \"firebase.storage.StorageReference.writeToFile(*) 'filePath' expects a string value.\",\n      );\n    }\n\n    return new StorageDownloadTask(this, task =>\n      this._storage.native.writeToFile(this.toString(), toFilePath(filePath), task._id),\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference\n   */\n  putFile(filePath, metadata) {\n    if (!isUndefined(metadata)) {\n      validateMetadata(metadata, false);\n    }\n\n    if (!isString(filePath)) {\n      throw new Error(\n        \"firebase.storage.StorageReference.putFile(*, _) 'filePath' expects a string value.\",\n      );\n    }\n\n    return new StorageUploadTask(this, task =>\n      this._storage.native.putFile(this.toString(), toFilePath(filePath), metadata, task._id),\n    );\n  }\n\n  _updateString(string, format, metadata, update = false) {\n    if (!isString(string)) {\n      throw new Error(\n        \"firebase.storage.StorageReference.putString(*, _, _) 'string' expects a string value.\",\n      );\n    }\n\n    if (!Object.values(StorageStatics.StringFormat).includes(format)) {\n      throw new Error(\n        `firebase.storage.StorageReference.putString(_, *, _) 'format' provided is invalid, must be one of ${Object.values(\n          StorageStatics.StringFormat,\n        ).join(',')}.`,\n      );\n    }\n\n    if (!isUndefined(metadata)) {\n      validateMetadata(metadata, update);\n    }\n\n    let _string = string;\n    let _format = format;\n    let _metadata = metadata;\n\n    if (format === StorageStatics.StringFormat.RAW) {\n      _string = Base64.btoa(_string);\n      _format = StorageStatics.StringFormat.BASE64;\n    } else if (format === StorageStatics.StringFormat.DATA_URL) {\n      const { mediaType, base64String } = getDataUrlParts(_string);\n      if (isUndefined(base64String)) {\n        throw new Error(\n          'firebase.storage.StorageReference.putString(*, _, _) invalid data_url string provided.',\n        );\n      }\n\n      if (isUndefined(metadata) || isUndefined(metadata.contentType)) {\n        if (isUndefined(metadata)) {\n          _metadata = {};\n        }\n        _metadata.contentType = mediaType;\n        _string = base64String;\n        _format = StorageStatics.StringFormat.BASE64;\n      }\n    }\n    return { _string, _metadata, _format };\n  }\n}\n\nprovideStorageReferenceClass(StorageReference);\n"]},"metadata":{},"sourceType":"module"}